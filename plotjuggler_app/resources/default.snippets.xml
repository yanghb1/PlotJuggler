<snippets>
  <snippet name="backward_difference_derivative">
    <global>prevX = 0
prevY = 0
is_first = true</global>
    <function>if (is_first) then
  is_first = false
  prevX = time
  prevY = value
end

dx = time - prevX
dy = value - prevY
prevX = time
prevY = value

return dy/dx</function>
    <linkedSource></linkedSource>
  </snippet>

  <snippet name="central_difference_derivative">
    <global>firstX = 0
firstY = 0
is_first = true
secondX = 0
secondY = 0
is_second = false</global>
    <function>-- Wait for initial values
if (is_first) then
  is_first = false
  is_second = true
  firstX = time
  firstY = value
end

if (is_second) then
  is_second = false
  secondX = time
  secondY = value
end

-- Central derivative: dy/dx ~= f(x+delta_x)-f(x-delta_x)/(2*delta_x)
dx = time - firstX
dy = value - firstY
-- Increment
firstX = secondX
firstY = secondY
secondX = time
secondY = value

return dy/dx</function>
    <linkedSource></linkedSource>
  </snippet>

  <snippet name="average_two_curves">
    <global></global>
    <function>return (value+v1)/2</function>
    <linkedSource></linkedSource>
  </snippet>
  <snippet name="integral">
    <global>prevX = 0
integral = 0
is_first = true</global>
    <function>if (is_first) then
  is_first = false
  prevX = time
end

dx = time - prevX
prevX = time

integral = integral + value*dx

return integral</function>
    <linkedSource></linkedSource>
  </snippet>
  <snippet name="rad_to_deg">
    <global></global>
    <function>return value*180/3.14159</function>
    <linkedSource></linkedSource>
  </snippet>
  <snippet name="remove_offset">
    <global>is_first = true
first_value = 0</global>
    <function>if (is_first) then
  is_first = false
  first_value = value
end

return value - first_value</function>
    <linkedSource></linkedSource>
  </snippet>

  <snippet name="quat_to_roll">
    <global></global>
    <function>w = value
x = v1
y = v2
z = v3

dcm21 = 2 * (w * x + y * z)
dcm22 = w*w - x*x - y*y + z*z

roll = math.atan(dcm21, dcm22)

return roll</function>
    <linkedSource></linkedSource>
  </snippet>

  <snippet name="quat_to_pitch">
    <global></global>
    <function>w = value
x = v1
y = v2
z = v3

dcm20 = 2 * (x * z - w * y)

pitch = math.asin(-dcm20)

return pitch</function>
    <linkedSource></linkedSource>
  </snippet>

    <snippet name="quat_to_yaw">
    <global></global>
    <function>w = value
x = v1
y = v2
z = v3

dcm10 = 2 * (x * y + w * z)
dcm00 = w*w + x*x - y*y - z*z

yaw = math.atan(dcm10, dcm00)

return yaw</function>
    <linkedSource></linkedSource>
  </snippet>
</snippets>
